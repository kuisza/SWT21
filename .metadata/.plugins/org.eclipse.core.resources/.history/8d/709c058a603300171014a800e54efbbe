package jmjrst.main;

import static org.junit.Assert.*;

import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Locale;
import java.util.Vector;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageReadParam;
import javax.imageio.ImageReader;
import javax.imageio.ImageTypeSpecifier;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.metadata.IIOMetadata;
import javax.imageio.metadata.IIOMetadataController;
import javax.imageio.plugins.jpeg.JPEGImageWriteParam;
import javax.imageio.stream.ImageInputStream;
import javax.imageio.stream.MemoryCacheImageOutputStream;


import org.jis.Main;
import org.jis.generator.Generator;
import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import static org.mockito.Mockito.*;

public class RotateImageTest {
	
	
	private Generator generatortest = new Generator(null , 0);
	private BufferedImage i;
//	private Main main = mock(Main.class);
//	private Generator generatortes2t = new Generator(main , 0);
	
	
	@Before
	public void setUp() {
		File file = new File("src/test/resources/picture.jpg");
		File file2 = new File("src/test/resources/picture90.jpg");
		File file3= new File("src/test/resources/picture180.jpg");
		File file4 = new File("src/test/resources/picture270.jpg");
		i = null;
	    IIOMetadata imeta = null;
		
		try
	    {
	      ImageInputStream iis = ImageIO.createImageInputStream(file);
	      ImageReader reader = ImageIO.getImageReadersByFormatName("jpg").next();
	      reader.setInput(iis, true);
	      ImageReadParam params = reader.getDefaultReadParam();
	      i = reader.read(0, params);
	      imeta = reader.getImageMetadata(0);
	      
	      ImageInputStream iis2 = ImageIO.createImageInputStream(file2);
	      ImageReader reader2 = ImageIO.getImageReadersByFormatName("jpg").next();
	      
	      ImageInputStream iis3 = ImageIO.createImageInputStream(file3);
	      ImageReader reader3 = ImageIO.getImageReadersByFormatName("jpg").next();
	   
	      ImageInputStream iis4 = ImageIO.createImageInputStream(file4);
	      ImageReader reader4 = ImageIO.getImageReadersByFormatName("jpg").next();
	   
	      
	    }
	    catch (IOException e)
	    {
	      System.err.println("Error while reading File: " + file.getAbsolutePath());
	      e.printStackTrace();
	      return;
	    }
	}

	@Test
	public void test() {
		assertEquals(123456, 123456);
	}
	
	@Test
	public void testrotateImage() {
		assertEquals(i, generatortest.rotateImage(i, 0.0));
		assertEquals(null, generatortest.rotateImage(null, 0.0));
		teardown(i);
	}
	
	@Test(expected = IllegalArgumentException.class) 
	public void testrotateImage2() { 
	     generatortest.rotateImage(i, 0.7);
	     teardown(i);
	}
	
	@Test
	public void testrotating() {
		BufferedImage image = i;
		assertEquals(image, i);
		image = generatortest.rotateImage(i, Generator.ROTATE_90);
		teardown(image);
		assertEquals(image.getWidth(null), i.getHeight(null));
		assertEquals(i.getWidth(null), image.getHeight(null));
		image = generatortest.rotateImage(image, Generator.ROTATE_270);
		assertEquals(bufferedImagesEqual(i, image), true);
		teardown(image);
		image = generatortest.rotateImage(i, Generator.ROTATE_270);
		assertEquals(buffImRotEqual(i, image), true);
		teardown(image);
	}
	
	@Test
	public void testrotatingwith180() {
		BufferedImage image =  generatortest.rotateImage(i,  Generator.ROTATE_180);
		assertEquals(i.getHeight(null), image.getHeight(null));
		assertEquals(i.getWidth(null), image.getWidth(null));
		assertEquals(buffImRotEqual(i , image), true);
		teardown(image);
	}
	
	@Test
	public void generateImageTest() throws IOException {
		File imagefile = new File("src\\test\\resources\\picture.jpg");
		assertEquals(imagefile.exists(), true);
		File out = new File("target\\data_test");
		boolean print = false;
		int width = 800;
		int height = 1024;
		String prefix = "test-";
		
		generatortest.generateImage(imagefile, out, print, width, height, prefix);
		
		File exist = new File("target\\data_test\\test-picture.jpg");
		
		assertEquals(exist.exists(), true);
		
		
	}

	
	@Test
	public void ZipTest() throws IOException {
		File zipname = new File("target\\data_test\\ZipTest.zip");
		File file1 = new File("src\\test\\resources\\picture.jpg");
		File file2 = new File("src\\test\\resources\\picture90.jpg");
		File file3 = new File("src\\test\\resources\\picture180.jpg");
        File file4 = new File("src\\test\\resources\\picture270.jpg");

		
		Vector<File> zipvector = new Vector<File>();
		zipvector.addElement(file1);
		zipvector.addElement(file2);
		zipvector.addElement(file3);
		zipvector.addElement(file4);
		
		generatortest.createZip(zipname, zipvector);
		
		assertEquals(new File("target\\data_test\\ZipTest.zip").exists() , true);
		
		FileInputStream inputstream = new FileInputStream(zipname);
		ZipInputStream zipstream = new ZipInputStream(inputstream);
		
		ZipEntry entry = null;
		
		int n = 0;
		
		while ((entry = zipstream.getNextEntry()) != null) {
			
			String name = entry.getName();
			String name2 = zipvector.get(n).getName();
			
			assertEquals(name , name2);
			assertEquals(zipvector.get(n).getName() , entry.getName());
			
	
		n++;
	}
		
		zipstream.close();	
		
	}
	

	
	@Ignore
	public void generateImage() throws IOException {
		File imagefile = new File("src\\test\\resources\\pictureforRotate.jpg");
		assertEquals(imagefile.exists(), true);
		File out = new File("target\\data_test");
		boolean print = false;
		int width = 1003;
		int height = 1024;
		String prefix = "testrotate-";
		
		generatortest.generateImage(imagefile, out, print, width, height, prefix);
		
		assertEquals(true, new File("src\\test\\resources\\pictureforRotate.jpg").exists());
		
	    
		
	}
		
	@Ignore
	public void rotateTest() {
		generatortest.rotate(new File("src\\test\\resources\\pictureforRotate.jpg"));
	}
	
	
	
	
	
	
	
	
	boolean bufferedImagesEqual(BufferedImage img1, BufferedImage img2) {
		
		
	    if (img1.getWidth() == img2.getWidth() && img1.getHeight() == img2.getHeight()) {
	        for (int x = 0; x < img1.getWidth(); x++) {
	            for (int y = 0; y < img1.getHeight(); y++) {
	                if (img1.getRGB(x, y) != img2.getRGB(x, y))
	                    return false;
	            }
	        }
	    } else {
	        return false;
	    }
	    return true;
	}
	
	
	boolean buffImRotEqual(BufferedImage img1, BufferedImage img2) {
		boolean same = false;
		
		if (bufferedImagesEqual(img1,img2)) {
			same = true;
		}
		
		
		if (bufferedImagesEqual(generatortest.rotateImage(img1, Generator.ROTATE_90) , img2)) {
			same = true;
		}
		
		
		if (bufferedImagesEqual(generatortest.rotateImage(img1, Generator.ROTATE_180) ,img2)) {
			same = true;
		}
		
		
		if (bufferedImagesEqual(generatortest.rotateImage(img1, Generator.ROTATE_270),img2)) {
			same = true;
		}
		
		return same;
	}
	
	
	
	public void teardown(BufferedImage image){
		File f = new File("target/data_test");

		
		String timeStamp = new SimpleDateFormat("HHmmss_SSS").format(Calendar.getInstance().getTime());
		String path = "target/data_test/rotatedPicture_" + timeStamp + ".jpg";
		
		if(!f.exists()) { 
			f.mkdir();
		}
		
		try {
			   ImageIO.write(image, "jpg", new File(path));  // ignore returned boolean
			} catch(IOException e) {
			 System.out.println("Write error for " + f.getPath() +
			                               ": " + e.getMessage());
			  }
	  }
	 
	
	
	
	

}
