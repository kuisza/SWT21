package org.iMage.geometrify;

import java.awt.Color;
import java.awt.Point;
import java.awt.image.BufferedImage;

public class CirclePictureFilter extends AbstractPrimitivePictureFilter{
	
	private static final int HEX_FF = 0xff;

	/**
	 * Constructs a {@link TrianglePictureFilter} with an specified
	 * {@link IPointGenerator}.
	 *
	 * @param pointGenerator
	 *            The {@link IPointGenerator} to use for generating
	 *            {@link Triangle} {@link Point}s
	 */
	public CirclePictureFilter() {
		
	}
	
	public CirclePictureFilter(IPointGenerator pointGenerator) {
		super(pointGenerator);
	}


	@Override
	public String getName() {
		// TODO Auto-generated method stub
		return "CirclePictureFilter";
	}

	@Override
	protected Color calculateColor(BufferedImage original, IPrimitive primitive) {
		int bandwidth = (original.getColorModel().hasAlpha()) ? 4 : 3;

		int width = original.getWidth();
		int height = original.getHeight();

		Point start = primitive.getBoundingBox().getUpperLeftCorner();
		Point end = primitive.getBoundingBox().getLowerRightCorner();

		int numPixels = 0;

		int red = 0;
		int green = 0;
		int blue = 0;
		int alpha = 0;

		int wStart = Math.max(0, start.x);
		int wEnd = Math.min(width - 1, end.x);
		int hStart = Math.max(0, start.y);
		int hEnd = Math.min(height - 1, end.y);
		int[] imgPixels = new int[width * height * bandwidth];

		original.getRaster().getPixels(0, 0, width, height, imgPixels);

		Point currPixel = new Point();

		for (int y = hStart; y <= hEnd; y++) {
			for (int x = wStart; x <= wEnd; x++) {
				currPixel.setLocation(x, y);
				if (primitive.isInsidePrimitive(currPixel)) {
					int pixelIndex = (y * width + x) * bandwidth;
					numPixels++;

					if (bandwidth == 4) {
						alpha += imgPixels[pixelIndex + 3];

					}
					red += imgPixels[pixelIndex + 2];
					green += imgPixels[pixelIndex + 1];
					blue += imgPixels[pixelIndex];

				}
			}
		}

		// normalize color values
		if (numPixels > 0) {
			alpha = alpha / numPixels;
			red = red / numPixels;
			green = green / numPixels;
			blue = blue / numPixels;
		}
		if (original.getColorModel().hasAlpha()) {
			return new Color(red, green, blue, alpha);
		} else {
			return new Color(red, green, blue);
		}
	}

	@Override
	public BufferedImage apply(BufferedImage image, int numberOfIterations, int numberOfSamples) {
		// TODO Auto-generated method stub
		return null;
	}
	
	//size?
	@Override
	protected IPrimitive generatePrimitive() {
		Point p = pointGenerator.nextPoint();
		return new Circle(pointGenerator.nextPoint(), pointGenerator.nextRadious(p));
	}

	@Override
	protected int calculateDifference(BufferedImage original, BufferedImage current, IPrimitive primitive) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	protected void addToImage(BufferedImage image, IPrimitive primitive) {
		// TODO Auto-generated method stub
		
	}

}
